var N = null;var searchIndex = {};
searchIndex["jsonrpc_core"]={"doc":"Transport agnostic jsonrpc library.","items":[[3,"IoHandler","jsonrpc_core","Simplified `IoHandler` with no `Metadata` associated with each request.",N,N],[3,"MetaIoHandler","","Request handler",N,N],[4,"RemoteProcedure","","Possible Remote Procedures with Metadata",N,N],[13,"Method","","A method call",0,N],[13,"Notification","","A notification",0,N],[13,"Alias","","An alias to other method,",0,N],[4,"Compatibility","","`IoHandler` json-rpc protocol compatibility",N,N],[13,"V1","","Compatible only with JSON-RPC 1.x",1,N],[13,"V2","","Compatible only with JSON-RPC 2.0",1,N],[13,"Both","","Compatible with both",1,N],[11,"with_compatibility","","Creates new `MetaIoHandler` compatible with specified protocol version.",2,[[["compatibility"]],["self"]]],[11,"new","","Creates new `MetaIoHandler`",2,[[["compatibility"],["s"]],["self"]]],[11,"with_middleware","","Creates new `MetaIoHandler` with specified middleware.",2,[[["s"]],["self"]]],[11,"add_alias","","Adds an alias to a method.",2,[[["self"],["str"],["str"]]]],[11,"add_method","","Adds new supported asynchronous method",2,[[["self"],["str"],["f"]]]],[11,"add_notification","","Adds new supported notification",2,[[["self"],["str"],["f"]]]],[11,"add_method_with_meta","","Adds new supported asynchronous method with metadata support.",2,[[["self"],["str"],["f"]]]],[11,"add_notification_with_meta","","Adds new supported notification with metadata support.",2,[[["self"],["str"],["f"]]]],[11,"extend_with","","Extend this `MetaIoHandler` with methods defined elsewhere.",2,[[["self"],["f"]]]],[11,"handle_request_sync","","Handle given request synchronously - will block until response is available. If you have any asynchronous methods in your RPC it is much wiser to use `handle_request` instead and deal with asynchronous requests in a non-blocking fashion.",2,[[["self"],["str"],["t"]],["option",["string"]]]],[11,"handle_request","","Handle given request asynchronously.",2,[[["self"],["str"],["t"]],["futureresult"]]],[11,"handle_rpc_request","","Handle deserialized RPC request.",2,[[["self"],["request"],["t"]],["futurerpcresult"]]],[11,"handle_call","","Handle single call asynchronously.",2,[[["self"],["call"],["t"]],["either",["either"]]]],[11,"new","","Creates new `IoHandler` without any metadata.",3,[[],["self"]]],[11,"with_compatibility","","Creates new `IoHandler` without any metadata compatible with specified protocol version.",3,[[["compatibility"]],["self"]]],[11,"handle_request","","Handle given string request asynchronously.",3,[[["self"],["str"]],["futureresult",["futureresponse","futureoutput"]]]],[11,"handle_rpc_request","","Handle deserialized RPC request asynchronously.",3,[[["self"],["request"]],["futurerpcresult",["futureresponse","futureoutput"]]]],[11,"handle_call","","Handle single Call asynchronously.",3,[[["self"],["call"]],["either",["futureoutput","either"]]]],[11,"handle_request_sync","","Handle given request synchronously - will block until response is available. If you have any asynchronous methods in your RPC it is much wiser to use `handle_request` instead and deal with asynchronous requests in a non-blocking fashion.",3,[[["self"],["str"]],["option",["string"]]]],[0,"middleware","","`IoHandler` middlewares",N,N],[3,"Noop","jsonrpc_core::middleware","No-op middleware implementation",N,N],[6,"NoopFuture","","Dummy future used as a noop result of middleware.",N,N],[6,"NoopCallFuture","","Dummy future used as a noop call result of middleware.",N,N],[8,"Middleware","","RPC middleware",N,N],[16,"Future","","A returned request future.",4,N],[16,"CallFuture","","A returned call future.",4,N],[11,"on_request","","Method invoked on each request. Allows you to either respond directly (without executing RPC call) or do any additional work before and/or after processing the request.",4,[[["self"],["request"],["m"],["f"]],["either"]]],[11,"on_call","","Method invoked on each call inside a request.",4,[[["self"],["call"],["m"],["f"]],["either"]]],[0,"types","jsonrpc_core","JSON-RPC types",N,N],[4,"Value","jsonrpc_core::types","Represents any valid JSON value.",N,N],[13,"Null","","Represents a JSON null value.",5,N],[13,"Bool","","Represents a JSON boolean.",5,N],[13,"Number","","Represents a JSON number, whether integer or floating point.",5,N],[13,"String","","Represents a JSON string.",5,N],[13,"Array","","Represents a JSON array.",5,N],[13,"Object","","Represents a JSON object.",5,N],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",N,[[["t"]],["result",["value","error"]]]],[5,"to_string","","Serialize the given data structure as a String of JSON.",N,[[["t"]],["result",["string","error"]]]],[0,"error","","jsonrpc errors",N,N],[3,"Error","jsonrpc_core::types::error","Error object as defined in Spec",N,N],[12,"code","","Code",6,N],[12,"message","","Message",6,N],[12,"data","","Optional data",6,N],[4,"ErrorCode","","JSONRPC error code",N,N],[13,"ParseError","","Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text.",7,N],[13,"InvalidRequest","","The JSON sent is not a valid Request object.",7,N],[13,"MethodNotFound","","The method does not exist / is not available.",7,N],[13,"InvalidParams","","Invalid method parameter(s).",7,N],[13,"InternalError","","Internal JSON-RPC error.",7,N],[13,"ServerError","","Reserved for implementation-defined server-errors.",7,N],[11,"code","","Returns integer code value",7,[[["self"]],["i64"]]],[11,"description","","Returns human-readable description",7,[[["self"]],["string"]]],[11,"new","","Wraps given `ErrorCode`",6,[[["errorcode"]],["self"]]],[11,"parse_error","","Creates new `ParseError`",6,[[],["self"]]],[11,"invalid_request","","Creates new `InvalidRequest`",6,[[],["self"]]],[11,"method_not_found","","Creates new `MethodNotFound`",6,[[],["self"]]],[11,"invalid_params","","Creates new `InvalidParams`",6,[[["m"]],["self"]]],[11,"invalid_params_with_details","","Creates `InvalidParams` for given parameter, with details.",6,[[["m"],["t"]],["error"]]],[11,"internal_error","","Creates new `InternalError`",6,[[],["self"]]],[11,"invalid_version","","Creates new `InvalidRequest` with invalid version description",6,[[],["self"]]],[0,"id","jsonrpc_core::types","jsonrpc id field",N,N],[4,"Id","jsonrpc_core::types::id","Request Id",N,N],[13,"Null","","No id (notification)",8,N],[13,"Num","","Numeric id",8,N],[13,"Str","","String id",8,N],[0,"params","jsonrpc_core::types","jsonrpc params field",N,N],[4,"Params","jsonrpc_core::types::params","Request parameters",N,N],[13,"None","","No parameters",9,N],[13,"Array","","Array of values",9,N],[13,"Map","","Map of values",9,N],[11,"parse","","Parse incoming `Params` into expected types.",9,[[["self"]],["result",["error"]]]],[11,"expect_no_params","","Check for no params, returns Err if any params",9,[[["self"]],["result",["error"]]]],[0,"request","jsonrpc_core::types","jsonrpc request",N,N],[3,"MethodCall","jsonrpc_core::types::request","Represents jsonrpc request which is a method call.",N,N],[12,"jsonrpc","","A String specifying the version of the JSON-RPC protocol.",10,N],[12,"method","","A String containing the name of the method to be invoked.",10,N],[12,"params","","A Structured value that holds the parameter values to be used during the invocation of the method. This member MAY be omitted.",10,N],[12,"id","","An identifier established by the Client that MUST contain a String, Number, or NULL value if included. If it is not included it is assumed to be a notification.",10,N],[3,"Notification","","Represents jsonrpc request which is a notification.",N,N],[12,"jsonrpc","","A String specifying the version of the JSON-RPC protocol.",11,N],[12,"method","","A String containing the name of the method to be invoked.",11,N],[12,"params","","A Structured value that holds the parameter values to be used during the invocation of the method. This member MAY be omitted.",11,N],[4,"Call","","Represents single jsonrpc call.",N,N],[13,"MethodCall","","Call method",12,N],[13,"Notification","","Fire notification",12,N],[13,"Invalid","","Invalid call",12,N],[12,"id","jsonrpc_core::types::request::Call","Call id (if known)",12,N],[4,"Request","jsonrpc_core::types::request","Represents jsonrpc request.",N,N],[13,"Single","","Single request (call)",13,N],[13,"Batch","","Batch of requests (calls)",13,N],[0,"response","jsonrpc_core::types","jsonrpc response",N,N],[3,"Success","jsonrpc_core::types::response","Successful response",N,N],[12,"jsonrpc","","Protocol version",14,N],[12,"result","","Result",14,N],[12,"id","","Correlation id",14,N],[3,"Failure","","Unsuccessful response",N,N],[12,"jsonrpc","","Protocol Version",15,N],[12,"error","","Error",15,N],[12,"id","","Correlation id",15,N],[4,"Output","","Represents output - failure or success",N,N],[13,"Success","","Success",16,N],[13,"Failure","","Failure",16,N],[4,"Response","","Synchronous response",N,N],[13,"Single","","Single response",17,N],[13,"Batch","","Response to batch request (batch of responses)",17,N],[11,"from","","Creates new output given `Result`, `Id` and `Version`.",16,[[["coreresult",["value"]],["id"],["option",["version"]]],["self"]]],[11,"invalid_request","","Creates new failure output indicating malformed request.",16,[[["id"],["option",["version"]]],["self"]]],[11,"version","","Get the jsonrpc protocol version.",16,[[["self"]],["option",["version"]]]],[11,"id","","Get the correlation id.",16,[[["self"]],["id"]]],[11,"from","","Creates new `Response` with given error and `Version`",17,[[["error"],["option",["version"]]],["self"]]],[0,"version","jsonrpc_core::types","jsonrpc version field",N,N],[4,"Version","jsonrpc_core::types::version","Protocol Version",N,N],[13,"V2","","JSONRPC 2.0",18,N],[0,"delegates","jsonrpc_core","Delegate rpc calls",N,N],[3,"IoDelegate","jsonrpc_core::delegates","A set of RPC methods and notifications tied to single `delegate` struct.",N,N],[11,"new","","Creates new `IoDelegate`",19,[[["arc"]],["self"]]],[11,"add_alias","","Adds an alias to existing method. NOTE: Aliases are not transitive, i.e. you cannot create alias to an alias.",19,[[["self"],["str"],["str"]]]],[11,"add_method","","Adds async method to the delegate.",19,[[["self"],["str"],["f"]]]],[11,"add_method_with_meta","","Adds async method with metadata to the delegate.",19,[[["self"],["str"],["f"]]]],[11,"add_notification","","Adds notification to the delegate.",19,[[["self"],["str"],["f"]]]],[6,"BoxFuture","jsonrpc_core","A `Future` trait object.",N,N],[6,"Result","","A Result type.",N,N],[6,"FutureOutput","","A type representing middleware or RPC call output.",N,N],[6,"FutureResult","","A type representing future string response.",N,N],[6,"FutureResponse","","A type representing middleware or RPC response before serialization.",N,N],[6,"FutureRpcResult","","A type representing an optional `Response` for RPC `Request`.",N,N],[8,"Metadata","","Metadata trait",N,N],[8,"RpcMethodSimple","","Asynchronous Method",N,N],[16,"Out","","Output future",20,N],[10,"call","","Call method",20,N],[8,"RpcMethod","","Asynchronous Method with Metadata",N,N],[10,"call","","Call method",21,[[["self"],["params"],["t"]],["boxfuture",["value"]]]],[8,"RpcNotificationSimple","","Notification",N,N],[10,"execute","","Execute notification",22,[[["self"],["params"]]]],[8,"RpcNotification","","Notification with Metadata",N,N],[10,"execute","","Execute notification",23,[[["self"],["params"],["t"]]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"into","jsonrpc_core::middleware","",24,[[["self"]],["u"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"into","jsonrpc_core::types","",5,[[["self"]],["u"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"into","jsonrpc_core::types::error","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"into","jsonrpc_core::types::id","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"into","jsonrpc_core::types::params","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"into","jsonrpc_core::types::request","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"into","jsonrpc_core::types::response","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"into","jsonrpc_core::types::version","",18,[[["self"]],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"into","jsonrpc_core::delegates","",19,[[["self"]],["u"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"from","jsonrpc_core::types","Convert 32-bit floating point number to `Value`",5,[[["f32"]],["value"]]],[11,"from","","",5,[[["i16"]],["value"]]],[11,"from","","",5,[[["i8"]],["value"]]],[11,"from","","",5,[[["u32"]],["value"]]],[11,"from","","",5,[[["i32"]],["value"]]],[11,"from","","",5,[[["u16"]],["value"]]],[11,"from","","",5,[[["u8"]],["value"]]],[11,"from","","Convert 64-bit floating point number to `Value`",5,[[["f64"]],["value"]]],[11,"from","","Convert map (with string keys) to `Value`",5,[[["map",["string","value"]]],["value"]]],[11,"from","","Convert `String` to `Value`",5,[[["string"]],["value"]]],[11,"from","","Convert copy-on-write string to `Value`",5,[[["cow",["str"]]],["value"]]],[11,"from","","Convert string slice to `Value`",5,[[["str"]],["value"]]],[11,"from","","",5,[[["u64"]],["value"]]],[11,"from","","Convert a `Vec` to `Value`",5,[[["vec"]],["value"]]],[11,"from","","Convert a slice to `Value`",5,N],[11,"from","","",5,[[["isize"]],["value"]]],[11,"from","","",5,[[["usize"]],["value"]]],[11,"from","","",5,[[["i64"]],["value"]]],[11,"from","","Convert boolean to `Value`",5,[[["bool"]],["value"]]],[11,"from_str","","",5,[[["str"]],["result",["value","error"]]]],[11,"index_mut","","Write into a `serde_json::Value` using the syntax `value[0] = ...` or `value[\"k\"] = ...`.",5,[[["self"],["i"]],["value"]]],[11,"eq","","",5,[[["self"],["f64"]],["bool"]]],[11,"eq","","",5,[[["self"],["str"]],["bool"]]],[11,"eq","","",5,[[["self"],["f32"]],["bool"]]],[11,"eq","","",5,[[["self"],["u64"]],["bool"]]],[11,"eq","","",5,[[["self"],["value"]],["bool"]]],[11,"ne","","",5,[[["self"],["value"]],["bool"]]],[11,"eq","","",5,[[["self"],["bool"]],["bool"]]],[11,"eq","","",5,[[["self"],["u16"]],["bool"]]],[11,"eq","","",5,[[["self"],["string"]],["bool"]]],[11,"eq","","",5,[[["self"],["isize"]],["bool"]]],[11,"eq","","",5,[[["self"],["i32"]],["bool"]]],[11,"eq","","",5,[[["self"],["i16"]],["bool"]]],[11,"eq","","",5,[[["self"],["i64"]],["bool"]]],[11,"eq","","",5,[[["self"],["usize"]],["bool"]]],[11,"eq","","",5,[[["self"],["str"]],["bool"]]],[11,"eq","","",5,[[["self"],["u32"]],["bool"]]],[11,"eq","","",5,[[["self"],["u8"]],["bool"]]],[11,"eq","","",5,[[["self"],["i8"]],["bool"]]],[11,"clone","","",5,[[["self"]],["value"]]],[11,"fmt","","Display a JSON value as a string.",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"deserialize_any","","",5,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i8","","",5,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i16","","",5,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i32","","",5,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i64","","",5,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u8","","",5,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u16","","",5,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u32","","",5,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u64","","",5,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f32","","",5,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f64","","",5,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i128","","",5,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u128","","",5,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_option","","",5,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_enum","","",5,N],[11,"deserialize_newtype_struct","","",5,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_bool","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",5,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",5,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",5,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",5,N],[11,"deserialize_identifier","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",5,[[["self"],["v"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"index","","Index into a `serde_json::Value` using the syntax `value[0]` or `value[\"k\"]`.",5,[[["self"],["i"]],["value"]]],[11,"deserialize","","",5,[[["d"]],["result",["value"]]]],[11,"from_iter","","Convert an iteratable type to a `Value`",5,[[["i"]],["value"]]],[11,"default","","",5,[[],["value"]]],[11,"serialize","","",5,[[["self"],["s"]],["result"]]],[11,"into","jsonrpc_core::delegates","",19,[[["self"]],["hashmap",["string","remoteprocedure"]]]],[11,"default","jsonrpc_core","",1,[[],["self"]]],[11,"default","","",2,[[],["self"]]],[11,"default","","",3,[[],["iohandler"]]],[11,"default","jsonrpc_core::middleware","",24,[[],["noop"]]],[11,"eq","jsonrpc_core::types::error","",7,[[["self"],["errorcode"]],["bool"]]],[11,"ne","","",7,[[["self"],["errorcode"]],["bool"]]],[11,"eq","","",6,[[["self"],["error"]],["bool"]]],[11,"ne","","",6,[[["self"],["error"]],["bool"]]],[11,"eq","jsonrpc_core::types::id","",8,[[["self"],["id"]],["bool"]]],[11,"ne","","",8,[[["self"],["id"]],["bool"]]],[11,"eq","jsonrpc_core::types::params","",9,[[["self"],["params"]],["bool"]]],[11,"ne","","",9,[[["self"],["params"]],["bool"]]],[11,"eq","jsonrpc_core::types::request","",10,[[["self"],["methodcall"]],["bool"]]],[11,"ne","","",10,[[["self"],["methodcall"]],["bool"]]],[11,"eq","","",11,[[["self"],["notification"]],["bool"]]],[11,"ne","","",11,[[["self"],["notification"]],["bool"]]],[11,"eq","","",12,[[["self"],["call"]],["bool"]]],[11,"ne","","",12,[[["self"],["call"]],["bool"]]],[11,"eq","","",13,[[["self"],["request"]],["bool"]]],[11,"ne","","",13,[[["self"],["request"]],["bool"]]],[11,"eq","jsonrpc_core::types::response","",14,[[["self"],["success"]],["bool"]]],[11,"ne","","",14,[[["self"],["success"]],["bool"]]],[11,"eq","","",15,[[["self"],["failure"]],["bool"]]],[11,"ne","","",15,[[["self"],["failure"]],["bool"]]],[11,"eq","","",16,[[["self"],["output"]],["bool"]]],[11,"ne","","",16,[[["self"],["output"]],["bool"]]],[11,"eq","","",17,[[["self"],["response"]],["bool"]]],[11,"ne","","",17,[[["self"],["response"]],["bool"]]],[11,"eq","jsonrpc_core::types::version","",18,[[["self"],["version"]],["bool"]]],[11,"from","jsonrpc_core","",2,[[["iohandler"]],["self"]]],[11,"from","jsonrpc_core::types::error","",7,[[["i64"]],["self"]]],[11,"from","jsonrpc_core::types::request","",12,[[["methodcall"]],["self"]]],[11,"from","","",12,[[["notification"]],["self"]]],[11,"from","jsonrpc_core","Convert into a result. Will be `Ok` if it is a `Success` and `Err` if `Failure`.",25,[[["output"]],["coreresult",["value"]]]],[11,"from","jsonrpc_core::types::response","",17,[[["failure"]],["self"]]],[11,"from","","",17,[[["success"]],["self"]]],[11,"clone","jsonrpc_core","",0,[[["self"]],["remoteprocedure"]]],[11,"clone","","",1,[[["self"]],["compatibility"]]],[11,"clone","jsonrpc_core::types::error","",7,[[["self"]],["errorcode"]]],[11,"clone","","",6,[[["self"]],["error"]]],[11,"clone","jsonrpc_core::types::id","",8,[[["self"]],["id"]]],[11,"clone","jsonrpc_core::types::params","",9,[[["self"]],["params"]]],[11,"clone","jsonrpc_core::types::request","",10,[[["self"]],["methodcall"]]],[11,"clone","","",11,[[["self"]],["notification"]]],[11,"clone","","",12,[[["self"]],["call"]]],[11,"clone","","",13,[[["self"]],["request"]]],[11,"clone","jsonrpc_core::types::response","",14,[[["self"]],["success"]]],[11,"clone","","",15,[[["self"]],["failure"]]],[11,"clone","","",16,[[["self"]],["output"]]],[11,"clone","","",17,[[["self"]],["response"]]],[11,"clone","jsonrpc_core::types::version","",18,[[["self"]],["version"]]],[11,"fmt","jsonrpc_core","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","jsonrpc_core::middleware","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","jsonrpc_core::types::error","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","jsonrpc_core::types::id","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","jsonrpc_core::types::params","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","jsonrpc_core::types::request","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","jsonrpc_core::types::response","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","jsonrpc_core::types::version","",18,[[["self"],["formatter"]],["result"]]],[11,"hash","jsonrpc_core::types::id","",8,N],[11,"hash","jsonrpc_core::types::version","",18,N],[11,"deref","jsonrpc_core","",3,N],[11,"deref_mut","","",3,N],[11,"serialize","jsonrpc_core::types::error","",7,[[["self"],["s"]],["result"]]],[11,"serialize","","",6,[[["self"],["__s"]],["result"]]],[11,"serialize","jsonrpc_core::types::id","",8,[[["self"],["__s"]],["result"]]],[11,"serialize","jsonrpc_core::types::params","",9,[[["self"],["__s"]],["result"]]],[11,"serialize","jsonrpc_core::types::request","",10,[[["self"],["__s"]],["result"]]],[11,"serialize","","",11,[[["self"],["__s"]],["result"]]],[11,"serialize","","",12,[[["self"],["__s"]],["result"]]],[11,"serialize","","",13,[[["self"],["__s"]],["result"]]],[11,"serialize","jsonrpc_core::types::response","",14,[[["self"],["__s"]],["result"]]],[11,"serialize","","",15,[[["self"],["__s"]],["result"]]],[11,"serialize","","",16,[[["self"],["__s"]],["result"]]],[11,"serialize","","",17,[[["self"],["__s"]],["result"]]],[11,"serialize","jsonrpc_core::types::version","",18,[[["self"],["s"]],["result"]]],[11,"deserialize","jsonrpc_core::types::error","",7,[[["d"]],["result",["errorcode"]]]],[11,"deserialize","","",6,[[["__d"]],["result"]]],[11,"deserialize","jsonrpc_core::types::id","",8,[[["__d"]],["result"]]],[11,"deserialize","jsonrpc_core::types::params","",9,[[["__d"]],["result"]]],[11,"deserialize","jsonrpc_core::types::request","",10,[[["__d"]],["result"]]],[11,"deserialize","","",11,[[["__d"]],["result"]]],[11,"deserialize","","",12,[[["__d"]],["result"]]],[11,"deserialize","","",13,[[["__d"]],["result"]]],[11,"deserialize","jsonrpc_core::types::response","",14,[[["__d"]],["result"]]],[11,"deserialize","","",15,[[["__d"]],["result"]]],[11,"deserialize","","",16,[[["__d"]],["result"]]],[11,"deserialize","","",17,[[["__d"]],["result"]]],[11,"deserialize","jsonrpc_core::types::version","",18,[[["d"]],["result",["version"]]]],[11,"get","jsonrpc_core::types","Index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",5,[[["self"],["i"]],["option",["value"]]]],[11,"get_mut","","Mutably index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",5,[[["self"],["i"]],["option",["value"]]]],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",5,[[["self"]],["bool"]]],[11,"as_object","","If the `Value` is an Object, returns the associated Map. Returns None otherwise.",5,[[["self"]],["option",["map"]]]],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable Map. Returns None otherwise.",5,[[["self"]],["option",["map"]]]],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",5,[[["self"]],["bool"]]],[11,"as_array","","If the `Value` is an Array, returns the associated vector. Returns None otherwise.",5,[[["self"]],["option",["vec"]]]],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector. Returns None otherwise.",5,[[["self"]],["option",["vec"]]]],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",5,[[["self"]],["bool"]]],[11,"as_str","","If the `Value` is a String, returns the associated str. Returns None otherwise.",5,[[["self"]],["option",["str"]]]],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",5,[[["self"]],["bool"]]],[11,"is_i64","","Returns true if the `Value` is an integer between `i64::MIN` and `i64::MAX`.",5,[[["self"]],["bool"]]],[11,"is_u64","","Returns true if the `Value` is an integer between zero and `u64::MAX`.",5,[[["self"]],["bool"]]],[11,"is_f64","","Returns true if the `Value` is a number that can be represented by f64.",5,[[["self"]],["bool"]]],[11,"as_i64","","If the `Value` is an integer, represent it as i64 if possible. Returns None otherwise.",5,[[["self"]],["option",["i64"]]]],[11,"as_u64","","If the `Value` is an integer, represent it as u64 if possible. Returns None otherwise.",5,[[["self"]],["option",["u64"]]]],[11,"as_f64","","If the `Value` is a number, represent it as f64 if possible. Returns None otherwise.",5,[[["self"]],["option",["f64"]]]],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",5,[[["self"]],["bool"]]],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool. Returns None otherwise.",5,[[["self"]],["option",["bool"]]]],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",5,[[["self"]],["bool"]]],[11,"as_null","","If the `Value` is a Null, returns (). Returns None otherwise.",5,[[["self"]],["option"]]],[11,"pointer","","Looks up a value by a JSON Pointer.",5,[[["self"],["str"]],["option",["value"]]]],[11,"pointer_mut","","Looks up a value by a JSON Pointer and returns a mutable reference to that value.",5,[[["self"],["str"]],["option",["value"]]]],[11,"take","","Takes the value out of the `Value`, leaving a `Null` in its place.",5,[[["self"]],["value"]]]],"paths":[[4,"RemoteProcedure"],[4,"Compatibility"],[3,"MetaIoHandler"],[3,"IoHandler"],[8,"Middleware"],[4,"Value"],[3,"Error"],[4,"ErrorCode"],[4,"Id"],[4,"Params"],[3,"MethodCall"],[3,"Notification"],[4,"Call"],[4,"Request"],[3,"Success"],[3,"Failure"],[4,"Output"],[4,"Response"],[4,"Version"],[3,"IoDelegate"],[8,"RpcMethodSimple"],[8,"RpcMethod"],[8,"RpcNotificationSimple"],[8,"RpcNotification"],[3,"Noop"],[6,"Result"]]};
searchIndex["jsonrpc_derive"]={"doc":"High level, typed wrapper for `jsonrpc_core`.","items":[[23,"rpc","jsonrpc_derive","Apply `#[rpc]` to a trait, and a `to_delegate` method is generated which wires up methods decorated with `#[rpc]` or `#[pubsub]` attributes. Attach the delegate to an `IoHandler` and the methods are now callable via JSON-RPC.",N,N]],"paths":[]};
searchIndex["jsonrpc_http_server"]={"doc":"jsonrpc http server.","items":[[3,"Host","jsonrpc_http_server","Host type",N,N],[4,"DomainsValidation","","Specifies if domains should be validated.",N,N],[13,"AllowOnly","","Allow only domains on the list.",0,N],[13,"Disabled","","Disable domains validation completely.",0,N],[0,"cors","","CORS handling utility functions",N,N],[4,"OriginProtocol","jsonrpc_http_server::cors","Origin Protocol",N,N],[13,"Http","","Http protocol",1,N],[13,"Https","","Https protocol",1,N],[13,"Custom","","Custom protocol",1,N],[3,"Origin","","Request Origin",N,N],[4,"AccessControlAllowOrigin","","Origins allowed to access",N,N],[13,"Value","","Specific hostname",2,N],[13,"Null","","null-origin (file:///, sandboxed iframe)",2,N],[13,"Any","","Any non-null origin",2,N],[4,"AccessControlAllowHeaders","","Headers allowed to access",N,N],[13,"Only","","Specific headers",3,N],[13,"Any","","Any header",3,N],[4,"AllowCors","","CORS response headers",N,N],[13,"NotRequired","","CORS header was not required. Origin is not present in the request.",4,N],[13,"Invalid","","CORS header is not returned, Origin is not allowed to access the resource.",4,N],[13,"Ok","","CORS header to include in the response. Origin is allowed to access the resource.",4,N],[5,"get_cors_allow_origin","","Returns correct CORS header (if any) given list of allowed origins and current origin.",N,[[["option",["str"]],["option",["str"]],["option"]],["allowcors",["accesscontrolalloworigin"]]]],[5,"get_cors_allow_headers","","Validates if the `AccessControlAllowedHeaders` in the request are allowed.",N,[[["impl iterator<item = t>"],["impl iterator<item = t>"],["accesscontrolallowheaders"],["f"]],["allowcors",["vec"]]]],[3,"Ascii","","Case Insensitive wrapper of Ascii strings.",N,N],[4,"AccessControlAllowOrigin","jsonrpc_http_server","Origins allowed to access",N,N],[13,"Value","","Specific hostname",2,N],[13,"Null","","null-origin (file:///, sandboxed iframe)",2,N],[13,"Any","","Any non-null origin",2,N],[3,"Origin","","Request Origin",N,N],[4,"AllowCors","","CORS response headers",N,N],[13,"NotRequired","","CORS header was not required. Origin is not present in the request.",4,N],[13,"Invalid","","CORS header is not returned, Origin is not allowed to access the resource.",4,N],[13,"Ok","","CORS header to include in the response. Origin is allowed to access the resource.",4,N],[3,"SuspendableStream","","`Incoming` is a stream of incoming sockets Polling the stream may return a temporary io::Error (for instance if we can't open the connection because of \"too many open files\" limit) we use for_each combinator which: 1. Runs for every Ok(socket) 2. Stops on the FIRST Err() So any temporary io::Error will cause the entire server to terminate. This wrapper type for tokio::Incoming stops accepting new connections for a specified amount of time once an io::Error is encountered",N,N],[3,"ServerHandler","","jsonrpc http request handler.",N,N],[3,"Response","","Simple server response structure",N,N],[12,"code","","Response code",5,N],[12,"content_type","","Response content type",5,N],[12,"content","","Response body",5,N],[3,"Rpc","","RPC Handler bundled with metadata extractor.",N,N],[12,"handler","","RPC Handler",6,N],[12,"extractor","","Metadata extractor",6,N],[3,"ServerBuilder","","Convenient JSON-RPC HTTP Server builder.",N,N],[3,"Server","","jsonrpc http server instance",N,N],[4,"RequestMiddlewareAction","","Action undertaken by a middleware.",N,N],[13,"Proceed","","Proceed with standard RPC handling",7,N],[12,"should_continue_on_invalid_cors","jsonrpc_http_server::RequestMiddlewareAction","Should the request be processed even if invalid CORS headers are detected? This allows for side effects to take place.",7,N],[12,"request","","The request object returned",7,N],[13,"Respond","jsonrpc_http_server","Intercept the request and respond differently.",7,N],[12,"should_validate_hosts","jsonrpc_http_server::RequestMiddlewareAction","Should standard hosts validation be performed?",7,N],[12,"response","","a future for server response",7,N],[4,"RestApi","jsonrpc_http_server","REST -> RPC converter state.",N,N],[13,"Secure","","The REST -> RPC converter is enabled and requires `Content-Type: application/json` header (even though the body should be empty). This protects from submitting an RPC call from unwanted origins.",8,N],[13,"Unsecure","","The REST -> RPC converter is enabled and does not require any `Content-Type` headers. NOTE: This allows sending RPCs via HTTP forms from any website.",8,N],[13,"Disabled","","The REST -> RPC converter is disabled.",8,N],[5,"is_host_allowed","","Returns `true` if Host header in request matches a list of allowed hosts.",N,[[["request"],["option"]],["bool"]]],[5,"cors_allow_origin","","Returns a CORS AllowOrigin header that should be returned with that request.",N,[[["request"],["option"]],["allowcors",["headervalue"]]]],[5,"cors_allow_headers","","Returns the CORS AllowHeaders header that should be returned with that request.",N,[[["request"],["accesscontrolallowheaders"]],["allowcors",["vec"]]]],[11,"new","","Create new request handler.",9,[[["rpc"],["option",["vec"]],["option",["u32"]],["accesscontrolallowheaders"],["option",["vec"]],["arc",["requestmiddleware"]],["restapi"],["option"],["usize"],["bool"]],["self"]]],[11,"empty","","Create a response with empty body and 200 OK status code.",5,[[],["self"]]],[11,"ok","","Create a response with given body and 200 OK status code.",5,[[["t"]],["self"]]],[11,"internal_error","","Create a response for plaintext internal error.",5,[[["t"]],["self"]]],[11,"service_unavailable","","Create a json response for service unavailable.",5,[[["t"]],["self"]]],[11,"host_not_allowed","","Create a response for not allowed hosts.",5,[[],["self"]]],[11,"unsupported_content_type","","Create a response for unsupported content type.",5,[[],["self"]]],[11,"method_not_allowed","","Create a response for disallowed method used.",5,[[],["self"]]],[11,"invalid_allow_origin","","CORS invalid",5,[[],["self"]]],[11,"invalid_allow_headers","","CORS header invalid",5,[[],["self"]]],[11,"bad_request","","Create a response for bad request",5,[[["s"]],["self"]]],[11,"too_large","","Create a response for too large (413)",5,[[["s"]],["self"]]],[8,"RequestMiddleware","","Allows to intercept request and handle it differently.",N,N],[10,"on_request","","Takes a request and decides how to proceed with it.",10,[[["self"],["request",["body"]]],["requestmiddlewareaction"]]],[8,"MetaExtractor","","Extracts metadata from the HTTP request.",N,N],[10,"read_metadata","","Read the metadata from the request",11,[[["self"],["request"]],["m"]]],[11,"new","","Creates new `ServerBuilder` for given `IoHandler`.",12,[[["t"]],["self"]]],[11,"with_meta_extractor","","Creates new `ServerBuilder` for given `IoHandler`.",12,[[["t"],["e"]],["self"]]],[11,"event_loop_executor","","Utilize existing event loop executor to poll RPC results.",12,[[["self"],["taskexecutor"]],["self"]]],[11,"rest_api","","Enable the REST -> RPC converter.",12,[[["self"],["restapi"]],["self"]]],[11,"health_api","","Enable health endpoint.",12,[[["self"],["t"]],["self"]]],[11,"keep_alive","","Enables or disables HTTP keep-alive.",12,[[["self"],["bool"]],["self"]]],[11,"threads","","Sets number of threads of the server to run.",12,[[["self"],["usize"]],["self"]]],[11,"cors","","Configures a list of allowed CORS origins.",12,[[["self"],["domainsvalidation",["accesscontrolalloworigin"]]],["self"]]],[11,"cors_max_age","","Configure CORS `AccessControlMaxAge` header returned.",12,[[["self"],["t"]],["self"]]],[11,"cors_allow_headers","","Configure the CORS `AccessControlAllowHeaders` header which are allowed.",12,[[["self"],["accesscontrolallowheaders"]],["self"]]],[11,"request_middleware","","Configures request middleware",12,[[["self"],["t"]],["self"]]],[11,"meta_extractor","","Configures metadata extractor",12,[[["self"],["t"]],["self"]]],[11,"allow_only_bind_host","","Allow connections only with `Host` header set to binding address.",12,[[["self"]],["self"]]],[11,"allowed_hosts","","Specify a list of valid `Host` headers. Binding address is allowed automatically.",12,[[["self"],["domainsvalidation",["host"]]],["self"]]],[11,"max_request_body_size","","Sets the maximum size of a request body in bytes (default is 5 MiB).",12,[[["self"],["usize"]],["self"]]],[11,"start_http","","Start this JSON-RPC HTTP server trying to bind to specified `SocketAddr`.",12,[[["self"],["socketaddr"]],["result",["server"]]]],[11,"address","","Returns address of this server",13,[[["self"]],["socketaddr"]]],[11,"close","","Closes the server.",13,[[["self"]]]],[11,"wait","","Will block, waiting for the server to finish.",13,[[["self"]]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"equivalent","","",14,[[["self"],["k"]],["bool"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"equivalent","","",0,[[["self"],["k"]],["bool"]]],[11,"into","jsonrpc_http_server::cors","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"equivalent","","",1,[[["self"],["k"]],["bool"]]],[11,"into","jsonrpc_http_server","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"equivalent","","",15,[[["self"],["k"]],["bool"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"equivalent","","",2,[[["self"],["k"]],["bool"]]],[11,"into","jsonrpc_http_server::cors","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"into","jsonrpc_http_server","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"equivalent","","",4,[[["self"],["k"]],["bool"]]],[11,"into","jsonrpc_http_server::cors","",16,[[["self"]],["u"]]],[11,"to_string","","",16,[[["self"]],["string"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"equivalent","","",16,[[["self"],["k"]],["bool"]]],[11,"into","jsonrpc_http_server","",17,[[["self"]],["u"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"from","","",15,[[["t"]],["origin"]]],[11,"from","","",0,[[["option",["vec"]]],["domainsvalidation"]]],[11,"from","","",2,[[["t"]],["accesscontrolalloworigin"]]],[11,"from","","",14,[[["t"]],["host"]]],[11,"hash","","",14,N],[11,"hash","jsonrpc_http_server::cors","",1,N],[11,"hash","jsonrpc_http_server","",15,N],[11,"fmt","","",15,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server::cors","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","jsonrpc_http_server","",14,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","jsonrpc_http_server::cors","",3,[[["self"],["accesscontrolallowheaders"]],["bool"]]],[11,"ne","","",3,[[["self"],["accesscontrolallowheaders"]],["bool"]]],[11,"eq","jsonrpc_http_server","",14,[[["self"],["host"]],["bool"]]],[11,"ne","","",14,[[["self"],["host"]],["bool"]]],[11,"eq","jsonrpc_http_server::cors","",1,[[["self"],["originprotocol"]],["bool"]]],[11,"ne","","",1,[[["self"],["originprotocol"]],["bool"]]],[11,"eq","jsonrpc_http_server","",15,[[["self"],["origin"]],["bool"]]],[11,"ne","","",15,[[["self"],["origin"]],["bool"]]],[11,"eq","","",2,[[["self"],["accesscontrolalloworigin"]],["bool"]]],[11,"ne","","",2,[[["self"],["accesscontrolalloworigin"]],["bool"]]],[11,"eq","","",0,[[["self"],["domainsvalidation"]],["bool"]]],[11,"ne","","",0,[[["self"],["domainsvalidation"]],["bool"]]],[11,"eq","","",4,[[["self"],["allowcors"]],["bool"]]],[11,"ne","","",4,[[["self"],["allowcors"]],["bool"]]],[11,"deref","","",15,N],[11,"deref","","",14,N],[11,"clone","","",2,[[["self"]],["accesscontrolalloworigin"]]],[11,"clone","jsonrpc_http_server::cors","",3,[[["self"]],["accesscontrolallowheaders"]]],[11,"clone","jsonrpc_http_server","",4,[[["self"]],["allowcors"]]],[11,"clone","","",14,[[["self"]],["host"]]],[11,"clone","jsonrpc_http_server::cors","",1,[[["self"]],["originprotocol"]]],[11,"clone","jsonrpc_http_server","",15,[[["self"]],["origin"]]],[11,"clone","","",0,[[["self"]],["domainsvalidation"]]],[11,"matches","","",15,[[["self"],["t"]],["bool"]]],[11,"matches","","",14,[[["self"],["t"]],["bool"]]],[11,"poll","","",17,[[["self"]],["result",["async"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"into","","",0,[[["self"]],["option",["vec"]]]],[11,"into","","",4,[[["self"]],["option"]]],[11,"deref_mut","jsonrpc_http_server::cors","",16,[[["self"]],["s"]]],[11,"hash","","",16,N],[11,"from_str","","",16,[[["str"]],["result",["ascii"]]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",16,[[["self"],["s2"]],["bool"]]],[11,"deref","","",16,[[["self"]],["s"]]],[11,"clone","","",16,[[["self"]],["ascii"]]],[11,"as_ref","","",16,[[["self"]],["str"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result",["error"]]]],[11,"cmp","","",16,[[["self"],["ascii"]],["ordering"]]],[11,"partial_cmp","","",16,[[["self"],["ascii"]],["option",["ordering"]]]],[11,"eq","jsonrpc_http_server","",8,[[["self"],["restapi"]],["bool"]]],[11,"from","","",7,[[["response"]],["self"]]],[11,"from","","",7,[[["response",["body"]]],["self"]]],[11,"from","","",7,[[["request",["body"]]],["self"]]],[11,"clone","","",6,[[["self"]],["self"]]],[11,"clone","","",8,[[["self"]],["restapi"]]],[11,"drop","","",13,[[["self"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"call","","",9,N],[11,"new","","Creates a new `Host` given hostname and port number.",14,[[["str"],["t"]],["host"]]],[11,"parse","","Attempts to parse given string as a `Host`. NOTE: This method always succeeds and falls back to sensible defaults.",14,[[["str"]],["host"]]],[11,"new","","Creates new origin given protocol, hostname and port parts. Pre-processes input data if necessary.",15,[[["originprotocol"],["str"],["t"]],["origin"]]],[11,"parse","","Attempts to parse given string as a `Origin`. NOTE: This method always succeeds and falls back to sensible defaults.",15,[[["str"]],["origin"]]],[11,"map","","Maps `Ok` variant of `AllowCors`.",4,[[["self"],["f"]],["allowcors"]]],[11,"new","jsonrpc_http_server::cors","",16,[[["s"]],["ascii"]]],[11,"new","jsonrpc_http_server","construct a new Suspendable stream, given tokio::Incoming and the amount of time to pause for.",17,[[["s"]],["suspendablestream"]]]],"paths":[[4,"DomainsValidation"],[4,"OriginProtocol"],[4,"AccessControlAllowOrigin"],[4,"AccessControlAllowHeaders"],[4,"AllowCors"],[3,"Response"],[3,"Rpc"],[4,"RequestMiddlewareAction"],[4,"RestApi"],[3,"ServerHandler"],[8,"RequestMiddleware"],[8,"MetaExtractor"],[3,"ServerBuilder"],[3,"Server"],[3,"Host"],[3,"Origin"],[3,"Ascii"],[3,"SuspendableStream"]]};
searchIndex["jsonrpc_ipc_server"]={"doc":"Cross-platform JSON-RPC IPC transport.","items":[[3,"SecurityAttributes","jsonrpc_ipc_server","A NOOP struct for bringing the API between Windows and Unix up to parity. To set permissions properly on Unix, you can just use `std::os::unix::fs::PermissionsExt`.",N,N],[4,"Separator","","Separator for enveloping messages in streaming codecs",N,N],[13,"Empty","","No envelope is expected between messages. Decoder will try to figure out message boundaries by accumulating incoming bytes until valid JSON is formed. Encoder will send messages without any boundaries between requests.",0,N],[13,"Byte","","Byte is used as an sentitel between messages",0,N],[8,"SessionStats","","Keeps track of open sessions",N,N],[10,"open_session","","Executed when new session is opened.",1,N],[10,"close_session","","Executed when session is closed.",1,N],[6,"SessionId","","Session id",N,N],[3,"NoopExtractor","","Noop-extractor",N,N],[3,"RequestContext","","Request context",N,N],[12,"session_id","","Session ID",2,N],[12,"endpoint_addr","","Remote UDS endpoint",2,N],[12,"sender","","Direct pipe sender",2,N],[3,"Server","","IPC Server handle",N,N],[3,"ServerBuilder","","IPC server builder",N,N],[3,"CloseHandle","","`CloseHandle` allows one to stop an `IpcServer` remotely.",N,N],[11,"new","","Creates new IPC server build given the `IoHandler`.",3,[[["t"]],["serverbuilder"]]],[11,"with_meta_extractor","","Creates new IPC server build given the `IoHandler` and metadata extractor.",3,[[["t"],["e"]],["serverbuilder"]]],[11,"event_loop_executor","","Sets shared different event loop executor.",3,[[["self"],["taskexecutor"]],["self"]]],[11,"session_meta_extractor","","Sets session metadata extractor.",3,[[["self"],["x"]],["self"]]],[11,"session_stats","","Session stats",3,[[["self"],["t"]],["self"]]],[11,"request_separators","","Sets the incoming and outgoing requests separator",3,[[["self"],["separator"],["separator"]],["self"]]],[11,"set_security_attributes","","Sets the security attributes for the underlying IPC socket/pipe",3,[[["self"],["securityattributes"]],["self"]]],[11,"set_client_buffer_size","","Sets how many concurrent requests per client can be processed at any one time. Set to 5 by default.",3,[[["self"],["usize"]],["self"]]],[11,"start","","Creates a new server from the given endpoint.",3,[[["self"],["str"]],["result",["server"]]]],[11,"close","","Closes the server (waits for finish)",4,[[["self"]]]],[11,"close_handle","","Creates a close handle that can be used to stop the server remotely",4,[[["self"]],["closehandle"]]],[11,"wait","","Wait for the server to finish",4,[[["self"]]]],[11,"close","","`close` closes the corresponding `IpcServer` instance.",5,[[["self"]]]],[8,"MetaExtractor","","Metadata extractor (per session)",N,N],[10,"extract","","Extracts metadata from request context",6,[[["self"],["requestcontext"]],["m"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",0,[[["self"]],["separator"]]],[11,"default","","",0,[[],["separator"]]],[11,"extract","","",8,[[["self"],["requestcontext"]],["m"]]],[11,"clone","","",5,[[["self"]],["closehandle"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"empty","","New default security attributes.",7,[[],["securityattributes"]]],[11,"allow_everyone_connect","","New security attributes that allow everyone to connect.",7,[[],["result",["securityattributes","error"]]]],[11,"allow_everyone_create","","New security attributes that allow everyone to create.",7,[[],["result",["securityattributes","error"]]]]],"paths":[[4,"Separator"],[8,"SessionStats"],[3,"RequestContext"],[3,"ServerBuilder"],[3,"Server"],[3,"CloseHandle"],[8,"MetaExtractor"],[3,"SecurityAttributes"],[3,"NoopExtractor"]]};
searchIndex["jsonrpc_macros"]={"doc":"High level, typed wrapper for `jsonrpc_core`.","items":[[3,"Trailing","jsonrpc_macros","A wrapper type without an implementation of `Deserialize` which allows a special implementation of `Wrap` for functions that take a trailing default parameter.",N,N],[3,"IoDelegate","","A set of RPC methods and notifications tied to single `delegate` struct.",N,N],[5,"to_value","","Converts a serializable value into `Value`.",N,[[["t"]],["value"]]],[11,"unwrap_or","","Returns a underlying value if present or provided value.",0,[[["self"],["t"]],["t"]]],[11,"unwrap_or_else","","Returns an underlying value or computes it if not present.",0,[[["self"],["f"]],["t"]]],[11,"unwrap_or_default","","Returns an underlying value or the default value.",0,[[["self"]],["t"]]],[11,"new","","Creates new `IoDelegate`",1,[[["arc"]],["self"]]],[11,"add_alias","","Adds an alias to existing method. NOTE: Aliases are not transitive, i.e. you cannot create alias to an alias.",1,[[["self"],["str"],["str"]]]],[11,"add_method","","Adds async method to the delegate.",1,[[["self"],["str"],["f"]]]],[11,"add_method_with_meta","","Adds async method with metadata to the delegate.",1,[[["self"],["str"],["f"]]]],[11,"add_notification","","Adds notification to the delegate.",1,[[["self"],["str"],["f"]]]],[11,"add_subscription","","Adds subscription to the delegate.",1,N],[0,"pubsub","","PUB-SUB auto-serializing structures.",N,N],[4,"SubscriptionId","jsonrpc_macros::pubsub","Unique subscription id. NOTE Assigning same id to different requests will cause the previous request to be unsubscribed.",N,N],[13,"Number","","U64 number",2,N],[13,"String","","String",2,N],[3,"Subscriber","","New PUB-SUB subcriber.",N,N],[3,"Sink","","Subscriber sink.",N,N],[11,"new","","Wrap non-typed subscriber.",3,[[["subscriber"]],["self"]]],[11,"new_test","","Create new subscriber for tests.",3,N],[11,"reject","","Reject subscription with given error.",3,[[["self"],["error"]],["result"]]],[11,"assign_id","","Assign id to this subscriber. This method consumes `Subscriber` and returns `Sink` if the connection is still open or error otherwise.",3,[[["self"],["subscriptionid"]],["result",["sink"]]]],[11,"notify","","Sends a notification to the subscriber.",4,[[["self"],["result"]],["sinkresult"]]],[14,"metadata","jsonrpc_macros","Auto-generates an RPC trait from trait definition.",N,N],[14,"build_rpc_trait","","",N,N],[11,"into","","",0,[[["self"]],["u"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"into","jsonrpc_macros::pubsub","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"from","","",2,[[["string"]],["subscriptionid"]]],[11,"from","","",2,[[["u64"]],["subscriptionid"]]],[11,"hash","","",2,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",2,[[["self"],["subscriptionid"]],["bool"]]],[11,"ne","","",2,[[["self"],["subscriptionid"]],["bool"]]],[11,"clone","","",2,[[["self"]],["subscriptionid"]]],[11,"into","jsonrpc_macros","",0,[[["self"]],["option"]]],[11,"into","","",1,[[["self"]],["hashmap",["string","remoteprocedure"]]]],[11,"from","","",0,[[["option"]],["self"]]],[11,"clone","jsonrpc_macros::pubsub","",4,[[["self"]],["sink"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"start_send","","",4,N],[11,"poll_complete","","",4,[[["self"]],["poll"]]],[11,"close","","",4,[[["self"]],["poll"]]],[11,"parse_value","","Parses `core::Value` into unique subscription id.",2,[[["value"]],["option",["subscriptionid"]]]]],"paths":[[3,"Trailing"],[3,"IoDelegate"],[4,"SubscriptionId"],[3,"Subscriber"],[3,"Sink"]]};
searchIndex["jsonrpc_pubsub"]={"doc":"Publish-Subscribe extension for JSON-RPC","items":[[3,"PubSubHandler","jsonrpc_pubsub","Publish-Subscribe extension of `IoHandler`.",N,N],[3,"IoDelegate","","Wire up rpc subscriptions to `delegate` struct",N,N],[3,"Session","","RPC client session Keeps track of active subscriptions and unsubscribes from them upon dropping.",N,N],[3,"Sink","","A handle to send notifications directly to subscribed client.",N,N],[3,"Subscriber","","Represents a subscribing client. Subscription handlers can either reject this subscription request or assign an unique id.",N,N],[4,"SubscriptionId","","Unique subscription id. NOTE Assigning same id to different requests will cause the previous request to be unsubscribed.",N,N],[13,"Number","","U64 number",0,N],[13,"String","","String",0,N],[5,"new_subscription","","Creates new subscribe and unsubscribe RPC methods",N,N],[11,"new","","Creates new `PubSubIoDelegate`, wrapping the core IoDelegate",1,[[["arc"]],["self"]]],[11,"add_subscription","","Adds subscription to the delegate.",1,N],[11,"add_alias","","Adds an alias to existing method.",1,[[["self"],["str"],["str"]]]],[11,"add_method","","Adds async method to the delegate.",1,[[["self"],["str"],["f"]]]],[11,"add_method_with_meta","","Adds async method with metadata to the delegate.",1,[[["self"],["str"],["f"]]]],[11,"add_notification","","Adds notification to the delegate.",1,[[["self"],["str"],["f"]]]],[11,"new","","Creates new `PubSubHandler`",2,[[["metaiohandler"]],["self"]]],[11,"add_subscription","","Adds new subscription.",2,N],[11,"new","","Creates new session given transport raw send capabilities. Session should be created as part of metadata, `sender` should be returned by transport.",3,[[["sender",["string"]]],["self"]]],[11,"sender","","Returns transport write stream",3,[[["self"]],["sender",["string"]]]],[11,"on_drop","","Adds a function to call when session is dropped.",3,[[["self"],["f"]]]],[11,"notify","","Sends a notification to a client.",4,[[["self"],["params"]],["sinkresult"]]],[11,"new_test","","Creates new subscriber.",5,N],[11,"assign_id","","Consumes `Subscriber` and assigns unique id to a requestor. Returns `Err` if request has already terminated.",5,[[["self"],["subscriptionid"]],["result",["sink"]]]],[11,"reject","","Rejects this subscription request with given error. Returns `Err` if request has already terminated.",5,[[["self"],["error"]],["result"]]],[11,"parse_value","","Parses `core::Value` into unique subscription id.",0,[[["value"]],["option",["subscriptionid"]]]],[0,"typed","","PUB-SUB auto-serializing structures.",N,N],[3,"Subscriber","jsonrpc_pubsub::typed","New PUB-SUB subscriber.",N,N],[3,"Sink","","Subscriber sink.",N,N],[11,"new","","Wrap non-typed subscriber.",6,[[["subscriber"]],["self"]]],[11,"new_test","","Create new subscriber for tests.",6,N],[11,"reject","","Reject subscription with given error.",6,[[["self"],["error"]],["result"]]],[11,"assign_id","","Assign id to this subscriber. This method consumes `Subscriber` and returns `Sink` if the connection is still open or error otherwise.",6,[[["self"],["subscriptionid"]],["result",["sink"]]]],[11,"notify","","Sends a notification to the subscriber.",7,[[["self"],["result"]],["sinkresult"]]],[6,"TransportError","jsonrpc_pubsub","Raw transport error.",N,N],[6,"SinkResult","","Subscription send result.",N,N],[8,"SubscribeRpcMethod","","Subscribe handler",N,N],[10,"call","","Called when client is requesting new subscription to be started.",8,[[["self"],["params"],["m"],["subscriber"]]]],[8,"UnsubscribeRpcMethod","","Unsubscribe handler",N,N],[16,"Out","","Output type",9,N],[10,"call","","Called when client is requesting to cancel existing subscription.",9,N],[8,"PubSubMetadata","","Metadata extension for pub-sub method handling.",N,N],[10,"session","","Returns session object associated with given request/client. `None` indicates that sessions are not supported on the used transport.",10,[[["self"]],["option",["arc"]]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"into","jsonrpc_pubsub::typed","",6,[[["self"]],["u"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"into","jsonrpc_pubsub","",1,[[["self"]],["hashmap",["string","remoteprocedure"]]]],[11,"into","","",2,[[["self"]],["metaiohandler"]]],[11,"default","","",2,[[],["self"]]],[11,"eq","","",0,[[["self"],["subscriptionid"]],["bool"]]],[11,"ne","","",0,[[["self"],["subscriptionid"]],["bool"]]],[11,"from","","",0,[[["string"]],["self"]]],[11,"from","","",0,[[["u64"]],["self"]]],[11,"clone","","",4,[[["self"]],["sink"]]],[11,"clone","","",0,[[["self"]],["subscriptionid"]]],[11,"clone","jsonrpc_pubsub::typed","",7,[[["self"]],["sink"]]],[11,"drop","jsonrpc_pubsub","",3,[[["self"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","jsonrpc_pubsub::typed","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"hash","jsonrpc_pubsub","",0,N],[11,"deref","","",2,N],[11,"deref_mut","","",2,N],[11,"start_send","","",4,N],[11,"poll_complete","","",4,[[["self"]],["poll"]]],[11,"close","","",4,[[["self"]],["poll"]]],[11,"start_send","jsonrpc_pubsub::typed","",7,N],[11,"poll_complete","","",7,[[["self"]],["poll"]]],[11,"close","","",7,[[["self"]],["poll"]]]],"paths":[[4,"SubscriptionId"],[3,"IoDelegate"],[3,"PubSubHandler"],[3,"Session"],[3,"Sink"],[3,"Subscriber"],[3,"Subscriber"],[3,"Sink"],[8,"SubscribeRpcMethod"],[8,"UnsubscribeRpcMethod"],[8,"PubSubMetadata"]]};
searchIndex["jsonrpc_pubsub_examples"]={"doc":"","items":[],"paths":[]};
searchIndex["jsonrpc_server_utils"]={"doc":"JSON-RPC servers utilities.","items":[[3,"SuspendableStream","jsonrpc_server_utils","`Incoming` is a stream of incoming sockets Polling the stream may return a temporary io::Error (for instance if we can't open the connection because of \"too many open files\" limit) we use for_each combinator which: 1. Runs for every Ok(socket) 2. Stops on the FIRST Err() So any temporary io::Error will cause the entire server to terminate. This wrapper type for tokio::Incoming stops accepting new connections for a specified amount of time once an io::Error is encountered",N,N],[0,"cors","","CORS handling utility functions",N,N],[3,"Ascii","jsonrpc_server_utils::cors","Case Insensitive wrapper of Ascii strings.",N,N],[3,"Origin","","Request Origin",N,N],[4,"OriginProtocol","","Origin Protocol",N,N],[13,"Http","","Http protocol",0,N],[13,"Https","","Https protocol",0,N],[13,"Custom","","Custom protocol",0,N],[4,"AccessControlAllowOrigin","","Origins allowed to access",N,N],[13,"Value","","Specific hostname",1,N],[13,"Null","","null-origin (file:///, sandboxed iframe)",1,N],[13,"Any","","Any non-null origin",1,N],[4,"AccessControlAllowHeaders","","Headers allowed to access",N,N],[13,"Only","","Specific headers",2,N],[13,"Any","","Any header",2,N],[4,"AllowCors","","CORS response headers",N,N],[13,"NotRequired","","CORS header was not required. Origin is not present in the request.",3,N],[13,"Invalid","","CORS header is not returned, Origin is not allowed to access the resource.",3,N],[13,"Ok","","CORS header to include in the response. Origin is allowed to access the resource.",3,N],[5,"get_cors_allow_origin","","Returns correct CORS header (if any) given list of allowed origins and current origin.",N,[[["option",["str"]],["option",["str"]],["option"]],["allowcors",["accesscontrolalloworigin"]]]],[5,"get_cors_allow_headers","","Validates if the `AccessControlAllowedHeaders` in the request are allowed.",N,N],[11,"new","","Creates new origin given protocol, hostname and port parts. Pre-processes input data if necessary.",4,[[["originprotocol"],["str"],["t"]],["self"]]],[11,"parse","","Attempts to parse given string as a `Origin`. NOTE: This method always succeeds and falls back to sensible defaults.",4,[[["str"]],["self"]]],[11,"map","","Maps `Ok` variant of `AllowCors`.",3,[[["self"],["f"]],["allowcors"]]],[0,"hosts","jsonrpc_server_utils","Host header validation.",N,N],[3,"Host","jsonrpc_server_utils::hosts","Host type",N,N],[4,"Port","","Port pattern",N,N],[13,"None","","No port specified (default port)",5,N],[13,"Pattern","","Port specified as a wildcard pattern",5,N],[13,"Fixed","","Fixed numeric port",5,N],[4,"DomainsValidation","","Specifies if domains should be validated.",N,N],[13,"AllowOnly","","Allow only domains on the list.",6,N],[13,"Disabled","","Disable domains validation completely.",6,N],[5,"is_host_valid","","Returns `true` when `Host` header is whitelisted in `allowed_hosts`.",N,[[["option",["str"]],["option"]],["bool"]]],[5,"update","","Updates given list of hosts with the address.",N,[[["option",["vec"]],["socketaddr"]],["option",["vec"]]]],[11,"new","","Creates a new `Host` given hostname and port number.",7,[[["str"],["t"]],["self"]]],[11,"parse","","Attempts to parse given string as a `Host`. NOTE: This method always succeeds and falls back to sensible defaults.",7,[[["str"]],["self"]]],[0,"session","jsonrpc_server_utils","Session statistics.",N,N],[6,"SessionId","jsonrpc_server_utils::session","Session id",N,N],[8,"SessionStats","","Keeps track of open sessions",N,N],[10,"open_session","","Executed when new session is opened.",8,[[["self"],["sessionid"]]]],[10,"close_session","","Executed when session is closed.",8,[[["self"],["sessionid"]]]],[0,"reactor","jsonrpc_server_utils","Event Loop Executor Either spawns a new event loop, or re-uses provided one.",N,N],[3,"RpcEventLoop","jsonrpc_server_utils::reactor","A handle to running event loop. Dropping the handle will cause event loop to finish.",N,N],[4,"UninitializedExecutor","","Possibly uninitialized event loop executor.",N,N],[13,"Shared","","Shared instance of executor.",9,N],[13,"Unspawned","","Event Loop should be spawned by the transport.",9,N],[4,"Executor","","Initialized Executor",N,N],[13,"Shared","","Shared instance",10,N],[13,"Spawned","","Spawned Event Loop",10,N],[11,"initialize","","Initializes executor. In case there is no shared executor, will spawn a new event loop. Dropping `Executor` closes the loop.",9,[[["self"]],["result",["executor"]]]],[11,"init_with_name","","Initializes executor. In case there is no shared executor, will spawn a new event loop. Dropping `Executor` closes the loop.",9,[[["self"],["t"]],["result",["executor"]]]],[11,"executor","","Get tokio executor associated with this event loop.",10,[[["self"]],["taskexecutor"]]],[11,"spawn","","Spawn a future onto the Tokio runtime.",10,[[["self"],["f"]]]],[11,"close","","Closes underlying event loop (if any!).",10,[[["self"]]]],[11,"wait","","Wait for underlying event loop to finish (if any!).",10,[[["self"]]]],[11,"spawn","","Spawns a new thread with the `EventLoop`.",11,[[],["result"]]],[11,"with_name","","Spawns a new named thread with the `EventLoop`.",11,[[["option",["string"]]],["result"]]],[11,"executor","","Get executor for this event loop.",11,[[["self"]],["taskexecutor"]]],[11,"wait","","Blocks current thread and waits until the event loop is finished.",11,[[["self"]],["result"]]],[11,"close","","Finishes this event loop.",11,[[["self"]]]],[11,"new","jsonrpc_server_utils","construct a new Suspendable stream, given tokio::Incoming and the amount of time to pause for.",12,[[["s"]],["self"]]],[0,"codecs","","Codecs utilities",N,N],[3,"StreamCodec","jsonrpc_server_utils::codecs","Stream codec for streaming protocols (ipc, tcp)",N,N],[4,"Separator","","Separator for enveloping messages in streaming codecs",N,N],[13,"Empty","","No envelope is expected between messages. Decoder will try to figure out message boundaries by accumulating incoming bytes until valid JSON is formed. Encoder will send messages without any boundaries between requests.",13,N],[13,"Byte","","Byte is used as an sentitel between messages",13,N],[8,"Pattern","jsonrpc_server_utils","Pattern that can be matched to string.",N,N],[10,"matches","","Returns true if given string matches the pattern.",14,[[["self"],["t"]],["bool"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"into","jsonrpc_server_utils::cors","",15,[[["self"]],["u"]]],[11,"to_string","","",15,[[["self"]],["string"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"into","jsonrpc_server_utils::hosts","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"into","jsonrpc_server_utils::reactor","",11,[[["self"]],["u"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"into","jsonrpc_server_utils::codecs","",16,[[["self"]],["u"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"deref_mut","jsonrpc_server_utils::cors","",15,[[["self"]],["s"]]],[11,"hash","","",15,N],[11,"from_str","","",15,[[["str"]],["result",["ascii"]]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",15,[[["self"],["s2"]],["bool"]]],[11,"deref","","",15,[[["self"]],["s"]]],[11,"clone","","",15,[[["self"]],["ascii"]]],[11,"as_ref","","",15,[[["self"]],["str"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result",["error"]]]],[11,"cmp","","",15,[[["self"],["ascii"]],["ordering"]]],[11,"partial_cmp","","",15,[[["self"],["ascii"]],["option",["ordering"]]]],[11,"matches","","",4,[[["self"],["t"]],["bool"]]],[11,"matches","jsonrpc_server_utils::hosts","",7,[[["self"],["t"]],["bool"]]],[11,"into","jsonrpc_server_utils::cors","",3,[[["self"]],["option"]]],[11,"into","jsonrpc_server_utils::hosts","",6,[[["self"]],["option",["vec"]]]],[11,"default","jsonrpc_server_utils::codecs","",13,[[],["self"]]],[11,"default","","",16,[[],["streamcodec"]]],[11,"eq","jsonrpc_server_utils::cors","",0,[[["self"],["originprotocol"]],["bool"]]],[11,"ne","","",0,[[["self"],["originprotocol"]],["bool"]]],[11,"eq","","",4,[[["self"],["origin"]],["bool"]]],[11,"ne","","",4,[[["self"],["origin"]],["bool"]]],[11,"eq","","",1,[[["self"],["accesscontrolalloworigin"]],["bool"]]],[11,"ne","","",1,[[["self"],["accesscontrolalloworigin"]],["bool"]]],[11,"eq","","",2,[[["self"],["accesscontrolallowheaders"]],["bool"]]],[11,"ne","","",2,[[["self"],["accesscontrolallowheaders"]],["bool"]]],[11,"eq","","",3,[[["self"],["allowcors"]],["bool"]]],[11,"ne","","",3,[[["self"],["allowcors"]],["bool"]]],[11,"eq","jsonrpc_server_utils::hosts","",5,[[["self"],["port"]],["bool"]]],[11,"ne","","",5,[[["self"],["port"]],["bool"]]],[11,"eq","","",7,[[["self"],["host"]],["bool"]]],[11,"ne","","",7,[[["self"],["host"]],["bool"]]],[11,"eq","","",6,[[["self"],["domainsvalidation"]],["bool"]]],[11,"ne","","",6,[[["self"],["domainsvalidation"]],["bool"]]],[11,"from","jsonrpc_server_utils::cors","",4,[[["t"]],["self"]]],[11,"from","","",1,[[["t"]],["accesscontrolalloworigin"]]],[11,"from","jsonrpc_server_utils::hosts","",5,[[["option",["u16"]]],["self"]]],[11,"from","","",5,[[["u16"]],["port"]]],[11,"from","","",7,[[["t"]],["self"]]],[11,"from","","",6,[[["option",["vec"]]],["self"]]],[11,"clone","jsonrpc_server_utils::cors","",0,[[["self"]],["originprotocol"]]],[11,"clone","","",4,[[["self"]],["origin"]]],[11,"clone","","",1,[[["self"]],["accesscontrolalloworigin"]]],[11,"clone","","",2,[[["self"]],["accesscontrolallowheaders"]]],[11,"clone","","",3,[[["self"]],["allowcors"]]],[11,"clone","jsonrpc_server_utils::hosts","",5,[[["self"]],["port"]]],[11,"clone","","",7,[[["self"]],["host"]]],[11,"clone","","",6,[[["self"]],["domainsvalidation"]]],[11,"clone","jsonrpc_server_utils::codecs","",13,[[["self"]],["separator"]]],[11,"drop","jsonrpc_server_utils::reactor","",11,[[["self"]]]],[11,"fmt","jsonrpc_server_utils::cors","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","jsonrpc_server_utils::hosts","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","jsonrpc_server_utils::reactor","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","jsonrpc_server_utils::codecs","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"hash","jsonrpc_server_utils::cors","",0,N],[11,"hash","","",4,N],[11,"hash","jsonrpc_server_utils::hosts","",5,N],[11,"hash","","",7,N],[11,"deref","jsonrpc_server_utils::cors","",4,N],[11,"deref","jsonrpc_server_utils::hosts","",7,N],[11,"poll","jsonrpc_server_utils","",12,[[["self"]],["result",["async"]]]],[11,"encode","jsonrpc_server_utils::codecs","",16,[[["self"],["string"],["bytesmut"]],["result"]]],[11,"decode","","",16,[[["self"],["bytesmut"]],["result",["option"]]]],[11,"new","jsonrpc_server_utils::cors","",15,[[["s"]],["ascii"]]],[11,"stream_incoming","jsonrpc_server_utils::codecs","Default codec with streaming input data. Input can be both enveloped and not.",16,[[],["self"]]],[11,"new","","New custom stream codec",16,[[["separator"],["separator"]],["self"]]]],"paths":[[4,"OriginProtocol"],[4,"AccessControlAllowOrigin"],[4,"AccessControlAllowHeaders"],[4,"AllowCors"],[3,"Origin"],[4,"Port"],[4,"DomainsValidation"],[3,"Host"],[8,"SessionStats"],[4,"UninitializedExecutor"],[4,"Executor"],[3,"RpcEventLoop"],[3,"SuspendableStream"],[4,"Separator"],[8,"Pattern"],[3,"Ascii"],[3,"StreamCodec"]]};
searchIndex["jsonrpc_stdio_server"]={"doc":"jsonrpc server using stdin/stdout","items":[[3,"ServerBuilder","jsonrpc_stdio_server","Stdio server builder",N,N],[11,"new","","Returns a new server instance",0,[[["t"]],["self"]]],[11,"build","","Will block until EOF is read or until an error occurs. The server reads from STDIN line-by-line, one request is taken per line and each response is written to STDOUT on a new line.",0,[[["self"]]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]]],"paths":[[3,"ServerBuilder"]]};
searchIndex["jsonrpc_tcp_server"]={"doc":"jsonrpc server over tcp/ip","items":[[4,"Separator","jsonrpc_tcp_server","Separator for enveloping messages in streaming codecs",N,N],[13,"Empty","","No envelope is expected between messages. Decoder will try to figure out message boundaries by accumulating incoming bytes until valid JSON is formed. Encoder will send messages without any boundaries between requests.",0,N],[13,"Byte","","Byte is used as an sentitel between messages",0,N],[3,"Dispatcher","","Peer-messages dispatcher.",N,N],[3,"RequestContext","","Request context",N,N],[12,"peer_addr","","Peer Address",1,N],[12,"sender","","Peer Sender channel",1,N],[3,"ServerBuilder","","TCP server builder",N,N],[3,"Server","","TCP Server handle",N,N],[4,"PushMessageError","","Push Message Error",N,N],[13,"NoSuchPeer","","Invalid peer",2,N],[13,"Send","","Send error",2,N],[11,"new","","Creates a new dispatcher",3,[[["arc",["mutex"]]],["self"]]],[11,"push_message","","Pushes message to given peer",3,[[["self"],["socketaddr"],["string"]],["result",["pushmessageerror"]]]],[11,"is_connected","","Returns `true` if the peer is still connnected",3,[[["self"],["socketaddr"]],["bool"]]],[11,"peer_count","","Returns current peer count.",3,[[["self"]],["usize"]]],[11,"new","","Creates new `ServerBuilder` wih given `IoHandler`",4,[[["t"]],["self"]]],[11,"with_meta_extractor","","Creates new `ServerBuilder` wih given `IoHandler`",4,[[["t"],["e"]],["self"]]],[11,"event_loop_executor","","Utilize existing event loop executor.",4,[[["self"],["taskexecutor"]],["self"]]],[11,"session_meta_extractor","","Sets session meta extractor",4,[[["self"],["t"]],["self"]]],[11,"request_separators","","Sets the incoming and outgoing requests separator",4,[[["self"],["separator"],["separator"]],["self"]]],[11,"start","","Starts a new server",4,[[["self"],["socketaddr"]],["result",["server"]]]],[11,"dispatcher","","Returns dispatcher",4,[[["self"]],["dispatcher"]]],[11,"close","","Closes the server (waits for finish)",5,[[["self"]]]],[11,"wait","","Wait for the server to finish",5,[[["self"]]]],[8,"MetaExtractor","","Metadata extractor (per session)",N,N],[10,"extract","","Extracts metadata from request context",6,[[["self"],["requestcontext"]],["m"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",0,[[["self"]],["separator"]]],[11,"default","","",0,[[],["separator"]]],[11,"from","","",2,[[["senderror",["string"]]],["self"]]],[11,"clone","","",3,[[["self"]],["dispatcher"]]],[11,"drop","","",5,[[["self"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]]],"paths":[[4,"Separator"],[3,"RequestContext"],[4,"PushMessageError"],[3,"Dispatcher"],[3,"ServerBuilder"],[3,"Server"],[8,"MetaExtractor"]]};
searchIndex["jsonrpc_test"]={"doc":"An utility package to test jsonrpc-core based projects.","items":[[3,"Options","jsonrpc_test","Test RPC options.",N,N],[12,"no_print","","Disable printing requests and responses.",0,N],[3,"Rpc","","RPC instance.",N,N],[12,"io","","Underlying `IoHandler`.",1,N],[12,"options","","Options",1,N],[4,"Encoding","","Encoding format.",N,N],[13,"Compact","","Encodes params using `serde::to_string`.",2,N],[13,"Pretty","","Encodes params using `serde::to_string_pretty`.",2,N],[11,"new","","Create a new RPC instance from a single delegate.",1,[[["d"]],["self"]]],[11,"request","","Perform a single, synchronous method call and return pretty-printed value",1,[[["self"],["str"],["t"]],["string"]]],[11,"make_request","","Perform a single, synchronous method call.",1,[[["self"],["str"],["t"],["encoding"]],["string"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"default","","",0,[[],["options"]]],[11,"default","","",1,[[],["rpc"]]],[11,"from","","",1,[[["iohandler"]],["self"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"Options"],[3,"Rpc"],[4,"Encoding"]]};
searchIndex["jsonrpc_ws_server"]={"doc":"`WebSockets` server.","items":[[3,"Origin","jsonrpc_ws_server","Request Origin",N,N],[3,"Host","","Host type",N,N],[4,"DomainsValidation","","Specifies if domains should be validated.",N,N],[13,"AllowOnly","","Allow only domains on the list.",0,N],[13,"Disabled","","Disable domains validation completely.",0,N],[6,"SessionId","","Session id",N,N],[8,"SessionStats","","Keeps track of open sessions",N,N],[10,"open_session","","Executed when new session is opened.",1,N],[10,"close_session","","Executed when session is closed.",1,N],[3,"Error","","The Error type.",N,N],[12,"0","","The kind of the error.",2,N],[3,"RequestContext","","Request context",N,N],[12,"session_id","","Session id",3,N],[12,"origin","","Request Origin",3,N],[12,"protocols","","Requested protocols",3,N],[12,"out","","Direct channel to send messages to a client.",3,N],[12,"executor","","Remote to underlying event loop.",3,N],[3,"NoopExtractor","","Dummy metadata extractor",N,N],[3,"CloseHandle","","A handle that allows closing of a server even if it owned by a thread blocked in `wait`.",N,N],[3,"Server","","`WebSockets` server implementation.",N,N],[3,"ServerBuilder","","Builder for `WebSockets` server",N,N],[4,"ErrorKind","","The kind of an error.",N,N],[13,"Msg","","A convenient variant for String.",4,N],[13,"Io","","",4,N],[13,"ConnectionClosed","","Attempted action on closed connection.",4,N],[4,"MiddlewareAction","","Request middleware action",N,N],[13,"Proceed","","Proceed with standard JSON-RPC behaviour.",5,N],[13,"Respond","","Terminate the request and return a response.",5,N],[12,"response","jsonrpc_ws_server::MiddlewareAction","Response to return",5,N],[12,"validate_origin","","Should origin be validated before returning the response?",5,N],[12,"validate_hosts","","Should hosts be validated before returning the response?",5,N],[11,"from_kind","jsonrpc_ws_server","Constructs an error from a kind, and generates a backtrace.",2,[[["errorkind"]],["error"]]],[11,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",2,[[["e"],["k"]],["error"]]],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a kind, and generates a backtrace",2,[[["box",["error"]],["k"]],["error"]]],[11,"kind","","Returns the kind of the error.",2,[[["self"]],["errorkind"]]],[11,"iter","","Iterates over the error chain.",2,[[["self"]],["iter"]]],[11,"backtrace","","Returns the backtrace associated with this error.",2,[[["self"]],["option",["backtrace"]]]],[11,"chain_err","","Extends the error chain with a new entry.",2,[[["self"],["f"]],["error"]]],[11,"description","","A short description of the error. This method is identical to `Error::description()`",2,[[["self"]],["str"]]],[11,"description","","A string describing the error kind.",4,[[["self"]],["str"]]],[11,"sender","","Get this session as a `Sink` spawning a new future in the underlying event loop.",3,[[["self"]],["sender",["string"]]]],[11,"addr","","Returns the address this server is listening on",6,[[["self"]],["socketaddr"]]],[11,"start","","Starts a new `WebSocket` server in separate thread. Returns a `Server` handle which closes the server when droped.",6,[[["socketaddr"],["arc",["metaiohandler"]],["arc",["metaextractor"]],["option",["vec"]],["option",["vec"]],["option",["arc"]],["option",["arc"]],["uninitializedexecutor"],["usize"],["usize"]],["result",["server"]]]],[11,"wait","","Consumes the server and waits for completion",6,[[["self"]],["result"]]],[11,"close","","Closes the server and waits for it to finish",6,[[["self"]]]],[11,"close_handle","","Returns a handle to the server that can be used to close it while another thread is blocking in `wait`.",6,[[["self"]],["closehandle"]]],[11,"close","","Closes the `Server`.",7,[[["self"]]]],[11,"new","","Creates new `ServerBuilder`",8,[[["t"]],["self"]]],[11,"with_meta_extractor","","Creates new `ServerBuilder`",8,[[["t"],["e"]],["self"]]],[11,"event_loop_executor","","Utilize existing event loop executor to poll RPC results.",8,[[["self"],["taskexecutor"]],["self"]]],[11,"session_meta_extractor","","Sets a meta extractor.",8,[[["self"],["t"]],["self"]]],[11,"allowed_origins","","Allowed origins.",8,[[["self"],["domainsvalidation",["origin"]]],["self"]]],[11,"allowed_hosts","","Allowed hosts.",8,[[["self"],["domainsvalidation",["host"]]],["self"]]],[11,"session_stats","","Session stats",8,[[["self"],["t"]],["self"]]],[11,"request_middleware","","Sets a request middleware. Middleware will be invoked before each handshake request. You can either terminate the handshake in the middleware or run a default behaviour after.",8,[[["self"],["t"]],["self"]]],[11,"max_connections","","Maximal number of concurrent connections this server supports. Default: 100",8,[[["self"],["usize"]],["self"]]],[11,"max_payload","","Maximal size of the payload (in bytes) Default: 5MB",8,[[["self"],["usize"]],["self"]]],[11,"start","","Starts a new `WebSocket` server in separate thread. Returns a `Server` handle which closes the server when droped.",8,[[["self"],["socketaddr"]],["result",["server"]]]],[6,"Result","","Convenient wrapper around `std::Result`.",N,N],[8,"MetaExtractor","","Metadata extractor from session data.",N,N],[10,"extract","","Extract metadata for given session",9,[[["self"],["requestcontext"]],["m"]]],[8,"RequestMiddleware","","Middleware to intercept server requests. You can either terminate the request (by returning a response) or just proceed with standard JSON-RPC handling.",N,N],[10,"process","","Process a request and decide what to do next.",10,[[["self"],["request"]],["middlewareaction"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"from","","",11,[[["t"]],["origin"]]],[11,"from","","",0,[[["option",["vec"]]],["domainsvalidation"]]],[11,"from","","",12,[[["t"]],["host"]]],[11,"hash","","",12,N],[11,"hash","","",11,N],[11,"fmt","","",11,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",12,[[["self"],["host"]],["bool"]]],[11,"ne","","",12,[[["self"],["host"]],["bool"]]],[11,"eq","","",11,[[["self"],["origin"]],["bool"]]],[11,"ne","","",11,[[["self"],["origin"]],["bool"]]],[11,"eq","","",0,[[["self"],["domainsvalidation"]],["bool"]]],[11,"ne","","",0,[[["self"],["domainsvalidation"]],["bool"]]],[11,"deref","","",11,N],[11,"deref","","",12,N],[11,"clone","","",12,[[["self"]],["host"]]],[11,"clone","","",11,[[["self"]],["origin"]]],[11,"clone","","",0,[[["self"]],["domainsvalidation"]]],[11,"matches","","",11,[[["self"],["t"]],["bool"]]],[11,"matches","","",12,[[["self"],["t"]],["bool"]]],[11,"into","","",0,[[["self"]],["option",["vec"]]]],[11,"extract","","",13,[[["self"],["requestcontext"]],["m"]]],[11,"from","","",2,[[["error"]],["self"]]],[11,"from","","",2,[[["errorkind"]],["self"]]],[11,"from","","",2,[[["str"]],["self"]]],[11,"from","","",2,[[["string"]],["self"]]],[11,"from","","",4,[[["str"]],["self"]]],[11,"from","","",4,[[["string"]],["self"]]],[11,"from","","",4,[[["error"]],["self"]]],[11,"from","","",2,[[["error"]],["self"]]],[11,"from","","",5,[[["option",["response"]]],["self"]]],[11,"clone","","",13,[[["self"]],["noopextractor"]]],[11,"clone","","",7,[[["self"]],["closehandle"]]],[11,"drop","","",6,[[["self"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"description","","",2,[[["self"]],["str"]]],[11,"cause","","",2,[[["self"]],["option",["error"]]]],[11,"new","","",2,[[["errorkind"],["state"]],["error"]]],[11,"from_kind","","",2,N],[11,"with_chain","","",2,[[["e"],["k"]],["self"]]],[11,"kind","","",2,N],[11,"iter","","",2,[[["self"]],["iter"]]],[11,"chain_err","","",2,[[["self"],["f"]],["self"]]],[11,"backtrace","","",2,[[["self"]],["option",["backtrace"]]]],[11,"extract_backtrace","","",2,[[["error"]],["option",["internalbacktrace"]]]],[11,"new","","Creates new origin given protocol, hostname and port parts. Pre-processes input data if necessary.",11,[[["originprotocol"],["str"],["t"]],["origin"]]],[11,"parse","","Attempts to parse given string as a `Origin`. NOTE: This method always succeeds and falls back to sensible defaults.",11,[[["str"]],["origin"]]],[11,"new","","Creates a new `Host` given hostname and port number.",12,[[["str"],["t"]],["host"]]],[11,"parse","","Attempts to parse given string as a `Host`. NOTE: This method always succeeds and falls back to sensible defaults.",12,[[["str"]],["host"]]]],"paths":[[4,"DomainsValidation"],[8,"SessionStats"],[3,"Error"],[3,"RequestContext"],[4,"ErrorKind"],[4,"MiddlewareAction"],[3,"Server"],[3,"CloseHandle"],[3,"ServerBuilder"],[8,"MetaExtractor"],[8,"RequestMiddleware"],[3,"Origin"],[3,"Host"],[3,"NoopExtractor"]]};
initSearch(searchIndex);
